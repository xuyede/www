vue模仿去哪儿网小项目

每新增一个功能都要创建一个新的分支 (内容和 master的一致))
    1) 把分支添加到本地
        git pull
    2) 对分支进行正常的操作 ( 编写 -> git add . -> git commit -m '备注' -> git push)
    3) 把分支的内容合并到主分支上
        git merge 远程仓库/分支名 -> git merge origin/index-swiper
    4) 提交主分支的内容
        git push

项目初始化
    1. 在主文件( main.js )中引入 reset.css 初始化整个项目的样式
    2. 在主文件( main.js )中引入 border.css 解决移动端一像素问题
    3. 添加 minimum-scale=1.0,maximum-scale=1.0,user-scalable=no 禁止页面缩放
    4. 在主文件( main.js )中引入 fastclick模块 解决移动端300毫秒点击延迟问题 ( FastClick.attach( document.body ) )
        ->   
            双击缩放时,浏览器捕获第一次单击后,会先等待一段时间,如果在这段时间区间里用户未进行下一次点击,
            则浏览器会做单击事件的处理,如果这段时间里用户进行了第二次单击操作,则浏览器会做双击事件处理,
            这段时间就是上面提到的300毫秒延迟
    5. 使用 rem作为大小单位(以 html的 font-size为基准)
    6. 尽量使用 flex布局,样式用stylus/ less/ sass 编写


项目的开发
    1. 使用 iconfont图标库
        1) 主文件( main.js )中引入 iconfont.css
        2) 引入对应的 eot/svg/ttf/woff 文件
        3) 用法 : <div class="iconfont">&#xe624;</div>   // 内容为64位编码,去iconfont项目中查看

    2. 使用轮播图插件( vue-awesome-swiper)
        1) 下载 : npm install vue-awesome-swiper --save

        2) 启动 : 两种用法( global / component)
            -> global -> main.js
            import Vue from 'vue'
            import VueAwesomeSwiper from 'vue-awesome-swiper'
            import 'swiper/dist/css/swiper.css'
            Vue.use(VueAwesomeSwiper, /* { default global options } */)

            -> component -> 具体的组件内使用
            import 'swiper/dist/css/swiper.css'
            import { swiper, swiperSlide } from 'vue-awesome-swiper'
            export default {
                components: {
                    swiper,
                    swiperSlide
                }
            }

        3) 模板/配置 :
            模板 ->
                <div class="swiper-wrapper">
                    <swiper :options="swiperOption" ref="mySwiper" @someSwiperEvent="callback">
                        <swiper-slide>I'm Slide 1</swiper-slide>
                        <swiper-slide>I'm Slide 2</swiper-slide>
                        <swiper-slide>I'm Slide 3</swiper-slide>

                        <div class="swiper-pagination"  slot="pagination"></div>   // 轮播提示小点
                        <div class="swiper-button-prev" slot="button-prev"></div>   // 左按钮
                        <div class="swiper-button-next" slot="button-next"></div>   // 右按钮
                        <div class="swiper-scrollbar"   slot="scrollbar"></div>   // 轮播进度
                    </swiper>
                </div>

            配置 ->
                export default {
                    name: 'Swiper',
                    data() {
                        return {
                            swiperOption: {
                                // some swiper options/callbacks
                                // 所有的参数同 swiper 官方 api 参数 
                                // ...
                                loop : true,
                                autoplay : true,
                                pagination : {
                                    el: '.swiper-pagination',
                                    type : '
                                },
                                observeParents : true,   // 当数据改变时更新自身
                                observer : true
                            }
                        }
                    },
                    computed: {
                        swiper() {
                            return this.$refs.mySwiper.swiper
                        }
                    },
                    mounted() {
                        // current swiper instance
                        // 然后你就可以使用当前上下文内的swiper对象去做你想做的事了
                        console.log('this is current swiper instance object', this.swiper)
                        this.swiper.slideTo(3, 1000, false)
                    }
                }

        4) 样式使用 ( >>> ) 穿透改变 vue-awesome-swiper组件里的样式
            ->
                .swiper-box >>> .swiper-pagination-bullet-active   // 改变小点的颜色
                    background-color #f0f0f0
                .swiper-box
                    overflow hidden   
                    width 100%          
                    height 0                // 占位
                    padding-bottom 26.66%   
                    background: #eee

                    .swiper-img
                        width 100%

        5) vue-awesome-swiper根据动态数据渲染
            -> imgList为动态获取的数据,当ingList有数据时再渲染

                <swiper v-if="imgList.length > 1" :options="swiperOption" ref="mySwiper">
                    <!-- slides -->
                    <swiper-slide v-for="img in imgList" :key="img.id">
                        <img class="swiper-img" :src="img.imgUrl">
                    </swiper-slide>
                    
                    <!-- Optional controls -->
                    <div class="swiper-pagination"  slot="pagination"></div>
                </swiper>

                props : {
                    imgList : {  
                        type : Array,
                        required : true
                    }
                }

                data () {
                    return {
                        swiperOption : {
                            pagination: {
                                el: '.swiper-pagination',
                                type : 'fraction'
                            },
                            observeParents : true,   // 父级数据改变时重新加载
                            observer : true
                        }
                    }
                }

    3. 使用fetch动态获取数据,并通过 v-bind传递数据给子组件,渲染数据的时候使用 v-if判断数据是否拿到
        -> 使用路径代理,把本地路径换成域名路径
            proxyTable: {
                '/api': {
                    target: 'http://localhost:8080',
                    // changeOrigin: true,
                    pathRewrite: {
                    '^/api': '/static/mock'
                    }
                }
            }

            fetch('/api/homeData.json')
                .then(response => response.json())
                .then(data => {
                    ...
                })
                .catch(err => console.log(err))

    4. 使用
        -> 非父子组件传递数据
            Vue.prototype.bus = new Vue()   // middle stage
                        
            tranfer data -> 
                this.bus.$emit(selfEvent, data)

            accept data ->
                mounted() {
                    this.bus.$on(selfEvent, data => { ... })
                }

    5. 使用ref存储dom元素
        通过 this.$refs[name][0] 获取dom元素

    6. 使用better-scroll实现页面的滑动 (样式添加overflow: hidden)
        -> 
            this.scroll = new BScroll(this.$refs.wrapper ,{
                scrollY : true,
                scrollX : false,
                click : true   // 移动端点击
            })   

            <div ref="wrapper">   // 确保三层结构
                <ul>
                    <li></li>
                    <li></li>
                    <li></li>
                    ...
                </ul>
            </div>

        -> 实现字母城市联动
            this.scroll.scrollToElement(element)   // 滑动到指定的dom元素

    7. 使用vuex保存数据
        逻辑分离:
            store/index.js 里面的数据分开 -> state.js / mutations.js / actions.js / ...

        api: 
            import { mapState , mapGetters , mapMutations , mapActions } from 'vuex'

            mapState / mapGetters / mapMutations / mapActions
                 (computed)                (methods)
                
            computed : {
                ...mapState(['city'])
                ...mapState({
                    currentCity : 'city'   // 直接this.currentCity 使用,把 this.$store.state.city 映射到 currentCity 上
                })
            }
            methods : {
                handleCityClick (city) {
                    this.change(city)( === this.$store.commit('changeCity', city) )
                }, 
                ...mapMutations({
                    change : 'changeCity'   // 把 this.$store.mutations.changeCity 映射到 change 上  
                })
            }


    8. 使用localStorage存储数据
        使用localStorage时要使用try,catch包裹避免错误
        try {

        } catch (e) {}
        

    9. 使用 keep-alive 组件
        -> 把该标签里面的东西存储到内存中,下一次渲染时不开启新的生命周期,直接到内存中获取
        -> 激活 activated / deactivated 生命周期函数,渲染时执行

    10. 使用递归组件
        -> 在组件中使用该组件进行渲染
            必须设置 name 属性
            ->
                export default {
                    name : 'DetailList',
                    props : {
                        listData : {
                            type : Array,
                            required : true
                        }
                    }
                };

            使用 name 属性的值作为组件的名称
            ->
                <div v-if="item.children">
                    <detail-list :listData="item.children" class="children-list"></detail-list>
                </div>

    11. 使用过渡组件
        -> fadeAnimate.vue
            <template>
                <transition>
                    <slot></slot>
                </transition>
            </template>

            <script>
            export default {
                name : 'FadeAnimate'
            };
            </script>

            <style scoped lang='stylus'>
                .v-enter, .v-leave-to
                    opacity 0
                .v-enter-active, .v-leave-active
                    transition opacity .5s
            </style>
        
        -> components : { fadeAnimate }
            <fade-animete>
                <div> ... </div>
            </fade-animete>

    12. 接口联调
        -> 删除本地静态数据
        -> 修改配置文件
                // Paths
                assetsSubDirectory: 'static',
                assetsPublicPath: '/',
                proxyTable: {
                    '/api': {
                        target: 'http://localhost:80',   // 数据存放的服务器接口
                        // changeOrigin: true,
                    }
                },

    13. 真机测试
        -> 使用内网IP运行 (ipconfig) 
        -> 修改 webpack-dev-server 配置 ( 添加 --host 0.0.0.0 : 0.0.0.0指的是本机上的所有IPV4地址 )
            webpack-dev-server --host 0.0.0.0 --inline --progress --config build/webpack.dev.conf.js

        -> 同一内网,手机访问 IPV4:8080 测试项目

    14. 打包上线
        -> npm run build : 把生成的 dist 目录里的文件放到服务器的根目录
        -> 如果需要修改路径可修改 config/index.js 里面的 build 的 assetsPublicPath: '/'

    14. 小坑
        -> 移动端获取滚动高度用 document.documentElement.scrollTop || document.body.scrollTop
        -> 静态资源放到 static中,例如 json文件
        -> 全局事件要在退出组件时解绑
        -> 向下兼容: npm install babel-polyfill --save
        -> 使用异步组件优化性能 (打包后js文件在1MB以上)
            
            